/**
 * Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY (TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET 
 * (SN), GERMAN AEROSPACE CENTRE (Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne tehnologije
 * informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE
 * COMMUNICATIONS (LAKE), INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, SA (PTIN), IBM Corp., 
 * INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFYIA PLIROFORIKI KAI EPIKINONIES ETERIA PERIORISMENIS EFTHINIS (AMITEC), TELECOM 
 * ITALIA S.p.a.(TI),  TRIALOG (TRIALOG), Stiftelsen SINTEF (SINTEF), NEC EUROPE LTD (NEC))
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.societies.api.internal.css.devicemgmt.device.sensor;

import java.sql.Time;
import java.util.Map;

import org.societies.api.internal.css.devicemgmt.device.Device;


/**
 * <font color="#3f5fbf">Represents the basic sensor from which all sensors derive
 * from.</font>
 * @author rafik
 * @version 1.0
 * @created 06-d�c.-2011 15:18:16
 */
@Deprecated
public interface Sensor extends Device {

	public static final int EVENT_EVENT_RAISED = 6;
	public static final int EVENT_LOWER_THRESHOLD_REACHED = 1;
	public static final int EVENT_SENSOR_ARMED = 7;
	public static final int EVENT_STREAMING_STARTED = 3;
	public static final int EVENT_STREAMING_STOPPED = 4;
	public static final int EVENT_UPPER_THRESHOLD_REACHED = 2;
	public static final int EVENT_VALUE_CHANGED = 5;
	public static final int EVENT_VALUE_UPDATED = 0;

	/**
	 * <font color="#3f5fbf">Returns sensor measurement data. Data is encoded into a
	 * map variable by</font>
	 * <font color="#3f5fbf">a pair (key,value). Derived sensors can implement an
	 * additional method particularizing data type and method name.</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Map codifying
	 * measured value. Map entries depends on implementation, but key "VALUE" is
	 * always admitted.</font>
	 */
	public Map getValue();

	/**
	 * <font color="#3f5fbf">Returns timestamp when data was measured.</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Timestamp
	 * when data was measured.</font>
	 */
	public Time getValueTimestamp();

	/**
	 * <font color="#3f5fbf">Request the sensor to refresh its value, if the device is
	 * able to</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 */
	public int refreshValue();

	/**
	 * <font color="#3f5fbf">Subscribe a listener for the events generated by the
	 * sensor and the device.</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> listener
	 * Listener for the sensor events</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 * 
	 * @param listener
	 */
	public int registerSensorListener(SensorListener  listener);

	/**
	 * <font color="#3f5fbf">Unsubscribe a listener for the events generated by the
	 * sensor and the device.</font>
	 * <font color="#7f9fbf"><b>@param</b></font><font color="#3f5fbf"> listener
	 * Listener for the sensor events</font>
	 * <font color="#7f9fbf"><b>@return</b></font><font color="#3f5fbf"> Returns 0 if
	 * sucess, other value if error.</font>
	 * 
	 * @param listener
	 */
	public void unregisterSensorListener(SensorListener  listener);

}