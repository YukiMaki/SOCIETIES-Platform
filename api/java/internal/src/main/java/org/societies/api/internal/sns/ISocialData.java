package org.societies.api.internal.sns;

import java.util.List;
import java.util.Map;

public interface ISocialData {

   
    /**
     * Add a new social connector to fetch data from a specific Social network
     * @param socialConnector Interface of the specific connector
     * @throws Exception 
     */
    void addSocialConnector(ISocialConnector social) throws Exception;
    
    /**
     * Remove a social connector by his unique ID
     * @param connectorId
     * @throws Exception 
     */
    void removeSocialConnector(String connectorId) throws Exception;
    
    /**
     * Remove a social connector by his unique ID
     * @param connectorId
     * @throws Exception 
     */
    void removeSocialConnector(ISocialConnector connector) throws Exception;
    
    /**
     * Provide a list of the available social connector
     * @return List of Social Connector
     */
    List<ISocialConnector> getSocialConnectors();
    
    /**
     * Provide the list of Profiles coming from different social Networks
     * @return Object that should be cast as  org.apache.shindig.social.opensocial.model.Person;
     */
    List<?> getSocialProfiles();
    
    /**
     * Provide a list of Person Object extracted from all the connectors
     * @return List of Object that should be cast as  org.apache.shindig.social.opensocial.model.Person;
     */
    List<?> getSocialPeople();
    
    
    /**
     * Provide the list of activity generated by the users in the social network.
     * @return List of Object that should be cast as  org.apache.shindig.social.opensocial.model.ActivityEntry;
     */
    List<?> getSocialActivity();
    
    /**
     * Provide a list of Groups generated in the social network
     * @return List of Object that should be cast as  org.apache.shindig.social.opensocial.model.Group;
     */
    List<?> getSocialGroups();

    /**
     * Requeire the component to fetch from all active connector fetching data from the social networks
     */
    void updateSocialData();
    
    /**
     * Get last upated session
     */
    long getLastUpdate();
    
     /**
      * Generate an connector based on the name of the social Network and the parameters passed
      * @param socialNetworkName
      * @param params  to generate correctly the connector (Must be present the token)
      * @return the implementation of the spicific social connector castest as the interfeace ISocialConnector
      */
    ISocialConnector createConnector(ISocialConnector.SocialNetwork socialNetworkName, Map<String, String> params);
    
    
    /**
     * Check if the specific connector is available
     * @param connector Connetor instance
     * @return boolean
     */
    boolean isAvailable(ISocialConnector connector);
}