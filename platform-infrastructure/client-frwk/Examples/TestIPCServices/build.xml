<?xml version="1.0" encoding="UTF-8"?>
<project name="ExampleServiceActivityTest" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    	<!-- Include extra build script to correct the generation 
	of coverage reports when this script is run from 
	the master build script-->
	<echo>Include coverage script fix</echo>
	<import file="${societies-main-build-root}/societies-coverage.xml" optional="true"/>


	<!--Turn on verbosity property. Only affects certain targets that use this property-->
    	<property name="verbose" value="false" />

	<!-- Overridden target from SDK build.xml
		Code coverage reports cannot be created if the standard build script
		is not run from the test app's root directory. The standard build creates a coverage.em 
		file but it is output to the master build directory. The societies-coverage.xml
		is invoked to move this file back to the test app's root directory prior to report generation
		The other modifications is the output location of the coverage report which was also
		being out to the master build directory. Finally, the metric attribute allows code coverage
		metrics to be specified. There is no fail if the report discovers metrics below these thresholds.
		EmmaCheck is an add-on Ant task that can do this and may be used in future. It is also 
		possible that the Jenkins Ant plugin could carry out this task.-->
    <target name="test" depends="-test-project-check"
                description="Runs tests from the package defined in test.package property">

        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />

        <property name="test.runner" value="android.test.InstrumentationTestRunner" />

        <!-- Application package of the tested project extracted from its manifest file -->
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
                expression="/manifest/@package" output="tested.manifest.package" />
        <xpath input="AndroidManifest.xml"
                expression="/manifest/@package" output="manifest.package" />

        <property name="emma.dump.file"
                value="/data/data/${tested.manifest.package}/coverage.ec" />

        <if condition="${emma.enabled}">
            <then>
                <echo>WARNING: Code Coverage is currently only supported on the emulator and rooted devices.</echo>
                <run-tests-helper emma.enabled="true">
                    <extra-instrument-args>
                        <arg value="-e" />
                           <arg value="coverageFile" />
                           <arg value="${emma.dump.file}" />
                    </extra-instrument-args>
                </run-tests-helper>
                <echo>Downloading coverage file into project directory...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${emma.dump.file}" />
                    <arg value="coverage.ec" />
                </exec>
			<!-- Non-standard SDK behaviour -->
		<if>
		   <condition>
		      <istrue value="${societies-coverage-report}"/>
		   </condition>
		   <then>
			<antcall target="move-coverage-em"></antcall>
		   </then>
		</if> 


                <echo>Extracting coverage report...</echo>
		<echo>${tested.project.absolute.dir}</echo>
		<echo>${source.dir}</echo>
                <emma>
			<!-- Non-standard SDK behaviour - metrics specified -->
                    <report sourcepath="${tested.project.absolute.dir}/${source.dir}"
                                      verbosity="${verbosity}" metrics="method:5,block:5,line:5,class:100">
                        <!-- TODO: report.dir or something like should be introduced if necessary -->
                        <infileset dir=".">
                            <include name="coverage.ec" />
                            <include name="coverage.em" />
                        </infileset>
                        <!-- TODO: reports in other, indicated by user formats -->
			<!-- Non-standard SDK behaviour -->
                        <html outfile="${basedir}/coverage/coverage.html" depth="method"/>
                   </report>
                </emma>
                <echo>Cleaning up temporary files...</echo>
                <delete file="coverage.ec" />
                <delete file="coverage.em" />
                <echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
            </then>
            <else>
                <run-tests-helper />
            </else>
        </if>
    </target>


    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
